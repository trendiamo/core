import _regeneratorRuntime from 'babel-runtime/regenerator';

var _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleLocationChange),
    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(recordForm);

import { put, takeEvery } from 'redux-saga/effects';
import { LOCATION_CHANGE } from 'react-router-redux';
import { destroy } from 'redux-form';
import { resetForm } from '../actions/formActions';
import { REDUX_FORM_NAME } from '../form/constants';

export function handleLocationChange(_ref) {
    var state = _ref.payload.state;
    return _regeneratorRuntime.wrap(function handleLocationChange$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    if (!(state && state.skipFormReset)) {
                        _context.next = 2;
                        break;
                    }

                    return _context.abrupt('return');

                case 2:
                    _context.next = 4;
                    return put(resetForm());

                case 4:
                    _context.next = 6;
                    return put(destroy(REDUX_FORM_NAME));

                case 6:
                case 'end':
                    return _context.stop();
            }
        }
    }, _marked, this);
}

export default function recordForm() {
    return _regeneratorRuntime.wrap(function recordForm$(_context2) {
        while (1) {
            switch (_context2.prev = _context2.next) {
                case 0:
                    _context2.next = 2;
                    return takeEvery(LOCATION_CHANGE, handleLocationChange);

                case 2:
                case 'end':
                    return _context2.stop();
            }
        }
    }, _marked2, this);
}