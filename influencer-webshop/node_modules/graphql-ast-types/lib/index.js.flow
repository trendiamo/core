
// @flow
// AUTO-GENERATED
import type { NameNode, DocumentNode, OperationDefinitionNode, VariableDefinitionNode, VariableNode, SelectionSetNode, FieldNode, ArgumentNode, FragmentSpreadNode, InlineFragmentNode, FragmentDefinitionNode, IntValueNode, FloatValueNode, StringValueNode, BooleanValueNode, NullValueNode, EnumValueNode, ListValueNode, ObjectValueNode, ObjectFieldNode, DirectiveNode, NamedTypeNode, ListTypeNode, NonNullTypeNode, SchemaDefinitionNode, OperationTypeDefinitionNode, ScalarTypeDefinitionNode, ObjectTypeDefinitionNode, FieldDefinitionNode, InputValueDefinitionNode, InterfaceTypeDefinitionNode, UnionTypeDefinitionNode, EnumTypeDefinitionNode, EnumValueDefinitionNode, InputObjectTypeDefinitionNode, TypeExtensionDefinitionNode, DirectiveDefinitionNode, OperationTypeNode, ASTNode, DefinitionNode, ValueNode, SelectionNode, TypeNode, TypeSystemDefinitionNode, TypeDefinitionNode } from "graphql/language/ast";
declare export function name(value: string): NameNode;
declare export function isName(node: any): boolean;
declare export function assertName(node: any): boolean;
declare export function document(definitions: Array<DefinitionNode>): DocumentNode;
declare export function isDocument(node: any): boolean;
declare export function assertDocument(node: any): boolean;
declare export function operationDefinition(operation: OperationTypeNode, selectionSet: SelectionSetNode, name: ?NameNode, variableDefinitions: ?Array<VariableDefinitionNode>, directives: ?Array<DirectiveNode>): OperationDefinitionNode;
declare export function isOperationDefinition(node: any): boolean;
declare export function assertOperationDefinition(node: any): boolean;
declare export function variableDefinition(variable: VariableNode, type: TypeNode, defaultValue: ?ValueNode): VariableDefinitionNode;
declare export function isVariableDefinition(node: any): boolean;
declare export function assertVariableDefinition(node: any): boolean;
declare export function variable(name: NameNode): VariableNode;
declare export function isVariable(node: any): boolean;
declare export function assertVariable(node: any): boolean;
declare export function selectionSet(selections: Array<SelectionNode>): SelectionSetNode;
declare export function isSelectionSet(node: any): boolean;
declare export function assertSelectionSet(node: any): boolean;
declare export function field(name: NameNode, alias: ?NameNode, arguments: ?Array<ArgumentNode>, directives: ?Array<DirectiveNode>, selectionSet: ?SelectionSetNode): FieldNode;
declare export function isField(node: any): boolean;
declare export function assertField(node: any): boolean;
declare export function argument(name: NameNode, value: ValueNode): ArgumentNode;
declare export function isArgument(node: any): boolean;
declare export function assertArgument(node: any): boolean;
declare export function fragmentSpread(name: NameNode, directives: ?Array<DirectiveNode>): FragmentSpreadNode;
declare export function isFragmentSpread(node: any): boolean;
declare export function assertFragmentSpread(node: any): boolean;
declare export function inlineFragment(selectionSet: SelectionSetNode, typeCondition: ?NamedTypeNode, directives: ?Array<DirectiveNode>): InlineFragmentNode;
declare export function isInlineFragment(node: any): boolean;
declare export function assertInlineFragment(node: any): boolean;
declare export function fragmentDefinition(name: NameNode, typeCondition: NamedTypeNode, selectionSet: SelectionSetNode, directives: ?Array<DirectiveNode>): FragmentDefinitionNode;
declare export function isFragmentDefinition(node: any): boolean;
declare export function assertFragmentDefinition(node: any): boolean;
declare export function intValue(value: string): IntValueNode;
declare export function isIntValue(node: any): boolean;
declare export function assertIntValue(node: any): boolean;
declare export function floatValue(value: string): FloatValueNode;
declare export function isFloatValue(node: any): boolean;
declare export function assertFloatValue(node: any): boolean;
declare export function stringValue(value: string): StringValueNode;
declare export function isStringValue(node: any): boolean;
declare export function assertStringValue(node: any): boolean;
declare export function booleanValue(value: boolean): BooleanValueNode;
declare export function isBooleanValue(node: any): boolean;
declare export function assertBooleanValue(node: any): boolean;
declare export function nullValue(): NullValueNode;
declare export function isNullValue(node: any): boolean;
declare export function assertNullValue(node: any): boolean;
declare export function enumValue(value: string): EnumValueNode;
declare export function isEnumValue(node: any): boolean;
declare export function assertEnumValue(node: any): boolean;
declare export function listValue(values: Array<ValueNode>): ListValueNode;
declare export function isListValue(node: any): boolean;
declare export function assertListValue(node: any): boolean;
declare export function objectValue(fields: Array<ObjectFieldNode>): ObjectValueNode;
declare export function isObjectValue(node: any): boolean;
declare export function assertObjectValue(node: any): boolean;
declare export function objectField(name: NameNode, value: ValueNode): ObjectFieldNode;
declare export function isObjectField(node: any): boolean;
declare export function assertObjectField(node: any): boolean;
declare export function directive(name: NameNode, arguments: ?Array<ArgumentNode>): DirectiveNode;
declare export function isDirective(node: any): boolean;
declare export function assertDirective(node: any): boolean;
declare export function namedType(name: NameNode): NamedTypeNode;
declare export function isNamedType(node: any): boolean;
declare export function assertNamedType(node: any): boolean;
declare export function listType(type: TypeNode): ListTypeNode;
declare export function isListType(node: any): boolean;
declare export function assertListType(node: any): boolean;
declare export function nonNullType(type: NamedTypeNode | ListTypeNode): NonNullTypeNode;
declare export function isNonNullType(node: any): boolean;
declare export function assertNonNullType(node: any): boolean;
declare export function schemaDefinition(directives: Array<DirectiveNode>, operationTypes: Array<OperationTypeDefinitionNode>): SchemaDefinitionNode;
declare export function isSchemaDefinition(node: any): boolean;
declare export function assertSchemaDefinition(node: any): boolean;
declare export function operationTypeDefinition(operation: OperationTypeNode, type: NamedTypeNode): OperationTypeDefinitionNode;
declare export function isOperationTypeDefinition(node: any): boolean;
declare export function assertOperationTypeDefinition(node: any): boolean;
declare export function scalarTypeDefinition(name: NameNode, directives: ?Array<DirectiveNode>): ScalarTypeDefinitionNode;
declare export function isScalarTypeDefinition(node: any): boolean;
declare export function assertScalarTypeDefinition(node: any): boolean;
declare export function objectTypeDefinition(name: NameNode, fields: Array<FieldDefinitionNode>, interfaces: ?Array<NamedTypeNode>, directives: ?Array<DirectiveNode>): ObjectTypeDefinitionNode;
declare export function isObjectTypeDefinition(node: any): boolean;
declare export function assertObjectTypeDefinition(node: any): boolean;
declare export function fieldDefinition(name: NameNode, arguments: Array<InputValueDefinitionNode>, type: TypeNode, directives: ?Array<DirectiveNode>): FieldDefinitionNode;
declare export function isFieldDefinition(node: any): boolean;
declare export function assertFieldDefinition(node: any): boolean;
declare export function inputValueDefinition(name: NameNode, type: TypeNode, defaultValue: ?ValueNode, directives: ?Array<DirectiveNode>): InputValueDefinitionNode;
declare export function isInputValueDefinition(node: any): boolean;
declare export function assertInputValueDefinition(node: any): boolean;
declare export function interfaceTypeDefinition(name: NameNode, fields: Array<FieldDefinitionNode>, directives: ?Array<DirectiveNode>): InterfaceTypeDefinitionNode;
declare export function isInterfaceTypeDefinition(node: any): boolean;
declare export function assertInterfaceTypeDefinition(node: any): boolean;
declare export function unionTypeDefinition(name: NameNode, types: Array<NamedTypeNode>, directives: ?Array<DirectiveNode>): UnionTypeDefinitionNode;
declare export function isUnionTypeDefinition(node: any): boolean;
declare export function assertUnionTypeDefinition(node: any): boolean;
declare export function enumTypeDefinition(name: NameNode, values: Array<EnumValueDefinitionNode>, directives: ?Array<DirectiveNode>): EnumTypeDefinitionNode;
declare export function isEnumTypeDefinition(node: any): boolean;
declare export function assertEnumTypeDefinition(node: any): boolean;
declare export function enumValueDefinition(name: NameNode, directives: ?Array<DirectiveNode>): EnumValueDefinitionNode;
declare export function isEnumValueDefinition(node: any): boolean;
declare export function assertEnumValueDefinition(node: any): boolean;
declare export function inputObjectTypeDefinition(name: NameNode, fields: Array<InputValueDefinitionNode>, directives: ?Array<DirectiveNode>): InputObjectTypeDefinitionNode;
declare export function isInputObjectTypeDefinition(node: any): boolean;
declare export function assertInputObjectTypeDefinition(node: any): boolean;
declare export function typeExtensionDefinition(definition: ObjectTypeDefinitionNode): TypeExtensionDefinitionNode;
declare export function isTypeExtensionDefinition(node: any): boolean;
declare export function assertTypeExtensionDefinition(node: any): boolean;
declare export function directiveDefinition(name: NameNode, locations: Array<NameNode>, arguments: ?Array<InputValueDefinitionNode>): DirectiveDefinitionNode;
declare export function isDirectiveDefinition(node: any): boolean;
declare export function assertDirectiveDefinition(node: any): boolean;

declare export function is(nodeName: string, node: any): boolean;
  