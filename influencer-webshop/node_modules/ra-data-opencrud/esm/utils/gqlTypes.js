var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { Kind } from 'graphql';

// Functional utils to easily build GraphQL ASTs
// Inspired by https://github.com/imranolas/graphql-ast-types

export var document = function document(definitions) {
  return {
    kind: Kind.DOCUMENT,
    definitions: definitions
  };
};

export var operationDefinition = function operationDefinition(operation, selectionSet, name, variableDefinitions) {
  return {
    kind: Kind.OPERATION_DEFINITION,
    operation: operation,
    selectionSet: selectionSet,
    name: name,
    variableDefinitions: variableDefinitions
  };
};

export var selectionSet = function selectionSet(selections) {
  return {
    kind: Kind.SELECTION_SET,
    selections: selections
  };
};

export var field = function field(name) {
  var optionalValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return _extends({
    kind: Kind.FIELD,
    name: name
  }, optionalValues);
};

export var listType = function listType(type) {
  return {
    kind: Kind.LIST_TYPE,
    type: type
  };
};

export var nonNullType = function nonNullType(type) {
  return {
    kind: Kind.NON_NULL_TYPE,
    type: type
  };
};

export var variableDefinition = function variableDefinition(variable, type) {
  return {
    kind: Kind.VARIABLE_DEFINITION,
    variable: variable,
    type: type
  };
};

export var variable = function variable(name) {
  return {
    kind: Kind.VARIABLE,
    name: name
  };
};

export var name = function name(value) {
  return {
    kind: Kind.NAME,
    value: value
  };
};

export var namedType = function namedType(name) {
  return {
    kind: Kind.NAMED_TYPE,
    name: name
  };
};

export var argument = function argument(name, value) {
  return {
    kind: Kind.ARGUMENT,
    name: name,
    value: value
  };
};