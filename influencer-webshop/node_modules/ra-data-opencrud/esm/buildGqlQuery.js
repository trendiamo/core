var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import { TypeKind, parse } from 'graphql';
import { QUERY_TYPES } from 'ra-data-graphql';
import { GET_LIST, GET_MANY, GET_MANY_REFERENCE, DELETE } from 'react-admin';

import * as gqlTypes from './utils/gqlTypes';
import getFinalType from './utils/getFinalType';
import isList from './utils/isList';
import isRequired from './utils/isRequired';

export var buildFields = function buildFields(introspectionResults) {
  return function (fields) {
    return fields.reduce(function (acc, field) {
      var type = getFinalType(field.type);

      if (type.name.startsWith('_')) {
        return acc;
      }

      if (type.kind !== TypeKind.OBJECT) {
        return [].concat(_toConsumableArray(acc), [gqlTypes.field(gqlTypes.name(field.name))]);
      }

      var linkedResource = introspectionResults.resources.find(function (r) {
        return r.type.name === type.name;
      });

      if (linkedResource) {
        return [].concat(_toConsumableArray(acc), [gqlTypes.field(gqlTypes.name(field.name), {
          selectionSet: gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name('id'))])
        })]);
      }

      var linkedType = introspectionResults.types.find(function (t) {
        return t.name === type.name;
      });

      if (linkedType) {
        return [].concat(_toConsumableArray(acc), [gqlTypes.field(gqlTypes.name(field.name), {
          selectionSet: gqlTypes.selectionSet(buildFields(introspectionResults)(linkedType.fields))
        })]);
      }

      // NOTE: We might have to handle linked types which are not resources but will have to be careful about
      // ending with endless circular dependencies
      return acc;
    }, []);
  };
};

export var getArgType = function getArgType(arg) {
  var type = getFinalType(arg.type);
  var required = isRequired(arg.type);
  var list = isList(arg.type);

  if (list) {
    if (required) {
      return gqlTypes.listType(gqlTypes.nonNullType(gqlTypes.namedType(gqlTypes.name(type.name))));
    }
    return gqlTypes.listType(gqlTypes.namedType(gqlTypes.name(type.name)));
  }

  if (required) {
    return gqlTypes.nonNullType(gqlTypes.namedType(gqlTypes.name(type.name)));
  }

  return gqlTypes.namedType(gqlTypes.name(type.name));
};

export var buildArgs = function buildArgs(query, variables) {
  if (query.args.length === 0) {
    return [];
  }

  var validVariables = Object.keys(variables).filter(function (k) {
    return typeof variables[k] !== 'undefined';
  });
  return query.args.filter(function (arg) {
    return validVariables.includes(arg.name);
  }).reduce(function (acc, arg) {
    return [].concat(_toConsumableArray(acc), [gqlTypes.argument(gqlTypes.name(arg.name), gqlTypes.variable(gqlTypes.name(arg.name)))]);
  }, []);
};

export var buildApolloArgs = function buildApolloArgs(query, variables) {
  if (query.args.length === 0) {
    return [];
  }

  var validVariables = Object.keys(variables).filter(function (k) {
    return typeof variables[k] !== 'undefined';
  });

  return query.args.filter(function (arg) {
    return validVariables.includes(arg.name);
  }).reduce(function (acc, arg) {
    return [].concat(_toConsumableArray(acc), [gqlTypes.variableDefinition(gqlTypes.variable(gqlTypes.name(arg.name)), getArgType(arg))]);
  }, []);
};

//TODO: validate fragment against the schema
var buildFieldsFromFragment = function buildFieldsFromFragment(fragment, resourceName, fetchType) {
  var parsedFragment = {};

  if ((typeof fragment === 'undefined' ? 'undefined' : _typeof(fragment)) === 'object' && fragment.kind && fragment.kind === 'Document') {
    parsedFragment = fragment;
  }

  if (typeof fragment === 'string') {
    if (!fragment.startsWith('fragment')) {
      fragment = 'fragment tmp on ' + resourceName + ' ' + fragment;
    }

    try {
      parsedFragment = parse(fragment);
    } catch (e) {
      throw new Error('Invalid fragment given for resource \'' + resourceName + '\' and fetchType \'' + fetchType + '\' (' + e.message + ').');
    }
  }

  return parsedFragment.definitions[0].selectionSet.selections;
};

export default (function (introspectionResults) {
  return function (resource, aorFetchType, queryType, variables, fragment) {
    var sortField = variables.sortField,
        sortOrder = variables.sortOrder,
        countVariables = _objectWithoutProperties(variables, ['sortField', 'sortOrder']);

    var apolloArgs = buildApolloArgs(queryType, variables);
    var args = buildArgs(queryType, variables);
    var countArgs = buildArgs(queryType, countVariables);
    var fields = !!fragment ? buildFieldsFromFragment(fragment, resource.type.name, aorFetchType) : buildFields(introspectionResults)(resource.type.fields);

    if (aorFetchType === GET_LIST || aorFetchType === GET_MANY || aorFetchType === GET_MANY_REFERENCE) {
      return gqlTypes.document([gqlTypes.operationDefinition('query', gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name(queryType.name), {
        alias: gqlTypes.name('items'),
        arguments: args,
        selectionSet: gqlTypes.selectionSet(fields)
      }), gqlTypes.field(gqlTypes.name(queryType.name + 'Connection'), {
        alias: gqlTypes.name('total'),
        arguments: countArgs,
        selectionSet: gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name('aggregate'), {
          selectionSet: gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name('count'))])
        })])
      })]), gqlTypes.name(queryType.name), apolloArgs)]);
    }

    if (aorFetchType === DELETE) {
      return gqlTypes.document([gqlTypes.operationDefinition('mutation', gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name(queryType.name), {
        alias: gqlTypes.name('data'),
        arguments: args,
        selectionSet: gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name('id'))])
      })]), gqlTypes.name(queryType.name), apolloArgs)]);
    }

    return gqlTypes.document([gqlTypes.operationDefinition(QUERY_TYPES.includes(aorFetchType) ? 'query' : 'mutation', gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name(queryType.name), {
      alias: gqlTypes.name('data'),
      arguments: args,
      selectionSet: gqlTypes.selectionSet(fields)
    })]), gqlTypes.name(queryType.name), apolloArgs)]);
  };
});