'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildQuery = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _operationNames;

var _camelCase = require('lodash/camelCase');

var _camelCase2 = _interopRequireDefault(_camelCase);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _pluralize = require('pluralize');

var _pluralize2 = _interopRequireDefault(_pluralize);

var _raDataGraphql = require('ra-data-graphql');

var _raDataGraphql2 = _interopRequireDefault(_raDataGraphql);

var _reactAdmin = require('react-admin');

var _buildQuery = require('./buildQuery');

var _buildQuery2 = _interopRequireDefault(_buildQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var buildQuery = exports.buildQuery = _buildQuery2.default;

var defaultOptions = {
  buildQuery: buildQuery,
  introspection: {
    operationNames: (_operationNames = {}, _defineProperty(_operationNames, _reactAdmin.GET_LIST, function (resource) {
      return '' + (0, _pluralize2.default)((0, _camelCase2.default)(resource.name));
    }), _defineProperty(_operationNames, _reactAdmin.GET_ONE, function (resource) {
      return '' + (0, _camelCase2.default)(resource.name);
    }), _defineProperty(_operationNames, _reactAdmin.GET_MANY, function (resource) {
      return '' + (0, _pluralize2.default)((0, _camelCase2.default)(resource.name));
    }), _defineProperty(_operationNames, _reactAdmin.GET_MANY_REFERENCE, function (resource) {
      return '' + (0, _pluralize2.default)((0, _camelCase2.default)(resource.name));
    }), _defineProperty(_operationNames, _reactAdmin.CREATE, function (resource) {
      return 'create' + resource.name;
    }), _defineProperty(_operationNames, _reactAdmin.UPDATE, function (resource) {
      return 'update' + resource.name;
    }), _defineProperty(_operationNames, _reactAdmin.DELETE, function (resource) {
      return 'delete' + resource.name;
    }), _operationNames),
    exclude: undefined,
    include: undefined
  }
};

//TODO: Prisma supports batching (UPDATE_MANY, DELETE_MANY)

exports.default = function (options) {
  return (0, _raDataGraphql2.default)((0, _merge2.default)({}, defaultOptions, options)).then(function (graphQLDataProvider) {
    return function (fetchType, resource, params) {
      // Temporary work-around until we make use of updateMany and deleteMany mutations
      if (fetchType === _reactAdmin.DELETE_MANY) {
        var ids = params.ids,
            otherParams = _objectWithoutProperties(params, ['ids']);

        return Promise.all(params.ids.map(function (id) {
          return graphQLDataProvider(_reactAdmin.DELETE, resource, _extends({
            id: id
          }, otherParams));
        })).then(function (results) {
          return { data: results.map(function (_ref) {
              var data = _ref.data;
              return data.id;
            }) };
        });
      }

      if (fetchType === _reactAdmin.UPDATE_MANY) {
        var _ids = params.ids,
            _otherParams = _objectWithoutProperties(params, ['ids']);

        return Promise.all(params.ids.map(function (id) {
          return graphQLDataProvider(_reactAdmin.UPDATE, resource, _extends({
            id: id
          }, _otherParams));
        })).then(function (results) {
          return { data: results.map(function (_ref2) {
              var data = _ref2.data;
              return data.id;
            }) };
        });
      }
      return graphQLDataProvider(fetchType, resource, params);
    };
  });
};