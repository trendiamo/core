'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argument = exports.namedType = exports.name = exports.variable = exports.variableDefinition = exports.nonNullType = exports.listType = exports.field = exports.selectionSet = exports.operationDefinition = exports.document = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _graphql = require('graphql');

// Functional utils to easily build GraphQL ASTs
// Inspired by https://github.com/imranolas/graphql-ast-types

var document = exports.document = function document(definitions) {
  return {
    kind: _graphql.Kind.DOCUMENT,
    definitions: definitions
  };
};

var operationDefinition = exports.operationDefinition = function operationDefinition(operation, selectionSet, name, variableDefinitions) {
  return {
    kind: _graphql.Kind.OPERATION_DEFINITION,
    operation: operation,
    selectionSet: selectionSet,
    name: name,
    variableDefinitions: variableDefinitions
  };
};

var selectionSet = exports.selectionSet = function selectionSet(selections) {
  return {
    kind: _graphql.Kind.SELECTION_SET,
    selections: selections
  };
};

var field = exports.field = function field(name) {
  var optionalValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return _extends({
    kind: _graphql.Kind.FIELD,
    name: name
  }, optionalValues);
};

var listType = exports.listType = function listType(type) {
  return {
    kind: _graphql.Kind.LIST_TYPE,
    type: type
  };
};

var nonNullType = exports.nonNullType = function nonNullType(type) {
  return {
    kind: _graphql.Kind.NON_NULL_TYPE,
    type: type
  };
};

var variableDefinition = exports.variableDefinition = function variableDefinition(variable, type) {
  return {
    kind: _graphql.Kind.VARIABLE_DEFINITION,
    variable: variable,
    type: type
  };
};

var variable = exports.variable = function variable(name) {
  return {
    kind: _graphql.Kind.VARIABLE,
    name: name
  };
};

var name = exports.name = function name(value) {
  return {
    kind: _graphql.Kind.NAME,
    value: value
  };
};

var namedType = exports.namedType = function namedType(name) {
  return {
    kind: _graphql.Kind.NAMED_TYPE,
    name: name
  };
};

var argument = exports.argument = function argument(name, value) {
  return {
    kind: _graphql.Kind.ARGUMENT,
    name: name,
    value: value
  };
};